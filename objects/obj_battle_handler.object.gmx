<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Battle state
//Set up enumeration for what "phase" the battle is in
enum battleState {START, CHOOSE, PREACTION, ACTION, WON, LOST}
//Set up enumeration for menuing
enum menuOptions {ATTACK, MAGIC, ITEM, SKILL, DEFEND, COMRADE, FLEE}

x = 0
y = 0
//List of enemies
enemyList = ds_list_create()
//ds_list_add(enemyList,instance_create(SCREEN_WIDTH/2,148,obj_pigmask_b))
//List of party members
partyList = ds_list_create()
ds_list_add(partyList,instance_create(SCREEN_WIDTH/2,178,obj_knife_b))
partyChoose = 0
//Priority queue for turn order
turnOrder = ds_priority_create()
currentActor = noone
//What turn is it?
turnNumber = 0
//Current state of battle
state = battleState.START
//Has text progression been queued up?
waiting = false
//Start the battle
alarm[0] = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy the lists of enemies and party members
ds_list_destroy(enemyList)
ds_list_destroy(partyList)
ds_priority_destroy(turnOrder)
//Destroy the combatants
instance_destroy(obj_combatant_parent)
//Reactivate NPCs
if state = battleState.WON
{
    instance_activate_object(obj_physics_parent)
    instance_activate_object(obj_enemy_f_parent)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start the battle
event_user(0)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Button Press Detection
//Start of battle
if state == battleState.START 
&amp;&amp; instance_exists(obj_battle_text_handler)
&amp;&amp; obj_battle_text_handler.done
&amp;&amp; keyboard_check_pressed(cs_acceptKey)
{
    instance_destroy(obj_battle_text_handler)
    state = battleState.CHOOSE
    event_user(0)
}

//Action Text
if state == battleState.ACTION
{
    if instance_exists(obj_battle_text_handler)
    {
        //Queue up continuing the battle text
        if keyboard_check_pressed(cs_acceptKey)
            waiting = true
        
        //Check to see if we should progress
        if obj_battle_text_handler.done
        &amp;&amp; !instance_exists(obj_damage_num) 
        &amp;&amp; waiting == true
        {
            with obj_battle_text_handler event_user(1)
            event_user(0)
            waiting = false
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Battle Logic

//Battle Setup
if state == battleState.START
{
    //Display start message
    var textHandler = instance_create(x,y,obj_battle_text_handler);
    textHandler.text = scr_get_article_start(enemyList[|0]) + " attacked!"
    textHandler.alarm[0] = 1
}

//Choose Action Phase
if state == battleState.CHOOSE
{
    //Loop through each party member and ask what they wanna do
    if partyChoose &lt; 0
        partyChoose = 0
    if partyChoose &lt; ds_list_size(partyList)
        with partyList[| partyChoose]
            event_user(0)
    //When choosing is done, have enemies choose their action
    else
    {
        instance_destroy(obj_battle_menu)
        var i
        for (i = 0; i &lt; ds_list_size(enemyList); i++)
        {
            with enemyList[| i]
                event_user(0)
        }
                
        //Shift to Preaction Phase
        state = battleState.PREACTION
    }
}

//Setup for Action Phase
if state == battleState.PREACTION
{
    //Reset choose variable
    partyChoose = 0
    enemyChoose = 0
    var i
    //Sort combatants by Speed
    for (i = 0; i &lt; ds_list_size(partyList); i++)
        ds_priority_add(turnOrder, partyList[| i], partyList[| i].spd)
    for (i = 0; i &lt; ds_list_size(enemyList); i++)
        ds_priority_add(turnOrder, enemyList[| i], enemyList[| i].spd)
    //Shift to Action phase
    state = battleState.ACTION
    //Create the battle text handler
    instance_create(x,y,obj_battle_text_handler)
}

//Perform Action Phase
if state == battleState.ACTION
{
    //Loop through each combatant and perform chosen action
    if !ds_priority_empty(turnOrder)
    {
        currentActor = ds_priority_find_max(turnOrder)
        with currentActor event_user(1)
        ds_priority_delete_max(turnOrder)
    }
    
    //Increment turn counter if all combatants are done
    else
    {
        turnNumber++
    
        //Unflag all combatants of having moved
        obj_combatant_parent.moved = false
        
        //Destroy the battle text handler
        instance_destroy(obj_battle_text_handler)
    
        //Shift to Choose Phase
        state = battleState.CHOOSE
        event_user(0)
    }
}

//Party Win State
else if state == battleState.WON
{
    //Display win message
    
    //Display post battle loot/exp
    
    //Exit battle
}

//Party Lose State
else if state == battleState.LOST
{
    //Display lose message
    
    //Exit battle and go to Game Over screen
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the borders
draw_set_color(c_black)
draw_rectangle(view_xview[0],view_yview[0],view_wview[0],view_yview[0]+56,0)
draw_rectangle(view_xview[0],view_hview[0],view_wview[0],view_hview[0]-70,0)
draw_set_color(c_white)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
