<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///How the player chooses what to do
//Who is controlling the menu?
controller = noone
//Where is the cursor?
cursor = 0
//Which submenu are we in?
//Use menuOptions enum
//99 for choosing target
menu = 0
//What move is being used?
moveKey = -1
//Who is being targeted?
//99 for all enemies
//-99 for party
//0 for everyone
target = noone
//What's the chosen menu?
//Use menuOptions enum
chosenMenu = -1
//ID for target arrow used for showing who's targeted
targetArrow = noone
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Button press detection
//Cursor Movement
//Main menu
if menu == 0
{
    if keyboard_check_pressed(vk_right)
    {
        if cursor == 5
            cursor = 1
        else if cursor == 6
            cursor = 0
        else
            cursor += 2
    }
    if keyboard_check_pressed(vk_left)
    {
        if cursor == 0
            cursor = 6
        else if cursor == 1
            cursor = 5
        else
            cursor -= 2
    }
    if (keyboard_check_pressed(vk_down) || keyboard_check_pressed(vk_up)) &amp;&amp; cursor != 6
    {
    //Make cursor loop vertically
        if cursor mod 2 == 0
            cursor += 1
        else
            cursor -= 1
    }
    //Make cursor loop back around
    cursor = cursor mod 7
}
//Target menu
if menu == 99
{
    //Make sure the move doesn't target an entire side (or everyone)
    if target != 99 &amp;&amp; target != -99 &amp;&amp; target != 0
    {
        if keyboard_check_pressed(vk_right)
        {
            cursor += 1
            cursor = cursor mod ds_list_size(obj_battle_handler.enemyList)
            target = obj_battle_handler.enemyList[|cursor]
            targetArrow.controller = target
        }
        if keyboard_check_pressed(vk_left)
        {
            cursor -= 1
            cursor = cursor mod ds_list_size(obj_battle_handler.enemyList)
            target = obj_battle_handler.enemyList[|cursor]
            targetArrow.controller = target
        }
    }
}

//Option Selection
if keyboard_check_pressed(cs_acceptKey)
{
    //If in main menu
    if menu == 0
    {
        //Set chosen to equal the cursor (saves what submenu we're in)
        chosenMenu = cursor
        //Basic Attack
        if cursor == menuOptions.ATTACK
        {
            //Go to target menu
            menu = 99
            moveKey = move.slash
            cursor = floor(ds_list_size(obj_battle_handler.enemyList)/2)
            target = obj_battle_handler.enemyList[| cursor]
            targetArrow = instance_create(target.x,target.y-target.sprite_height-4,obj_target_arrow)
            targetArrow.controller = target
        }
        //Magic
        else if cursor == menuOptions.MAGIC
        {
        }
        //Items
        else if cursor == menuOptions.ITEM
        {
        }
        //Skills
        else if cursor == menuOptions.SKILL
        {
        }
        //Defend
        else if cursor == menuOptions.DEFEND
        {
        }
        //Comradery
        else if cursor == menuOptions.COMRADE
        {
        }
        //Flee
        else if cursor == menuOptions.FLEE
        {
        }
    }
    //Choose target
    else if menu == 99
    {
        controller.chosenTarget = target
        instance_destroy(targetArrow)
        if chosenMenu == menuOptions.ATTACK
        {
            switch object_get_name(controller)
            {
            case "obj_knife": controller.moveKey = move.slash;  break;
            default: controller.moveKey = move.slash;
            } 
        }
        obj_battle_handler.partyChoose++
        with obj_battle_handler event_user(0)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the menu
//Set the font
draw_set_font(global.font)

//Draw the menubox
//Main menu
if menu == 0
    draw_sprite(spr_battle_menu,0,8,12)
//Target menu
if menu == 99
{
    draw_sprite(spr_battle_target,0,8,12)
    draw_sprite(spr_battle_target,0,159,12)
}
    
    

//Display who's controlling the menubox
draw_text(16,1,controller.name)
//If applicable, say what submenu this is
if chosenMenu != -1
{
    draw_rectangle(75,0,75,12,0)
    switch chosenMenu
    {
    case menuOptions.ATTACK:
        draw_sprite(spr_icons,0,78,1)
        draw_text(88,1,"Slash")
        break;
    case menuOptions.MAGIC:
        draw_sprite(spr_icons,1,78,1)
        draw_text(88,1,"Magic")
        break;
    case menuOptions.ITEM:
        draw_sprite(spr_icons,2,78,1)
        draw_text(88,1,"Items")
        break;
    case menuOptions.SKILL:
        draw_sprite(spr_icons,3,78,1)
        draw_text(88,1,"Skills")
        break;
    case menuOptions.DEFEND:
        draw_sprite(spr_icons,4,78,1)
        draw_text(88,1,"Defend")
        break;
    case menuOptions.COMRADE:
        draw_sprite(spr_icons,5,78,1)
        draw_text(88,1,"Comradery")
        break;
    }
}

//Main menu
if menu == 0
{
    //Draw the options
    //Position Cursor
    draw_sprite(spr_pointer,0,(floor(cursor/2)*76)+15,((cursor mod 2)*16)+20)
    //Basic Attack
    draw_sprite(spr_icons,0,22,20)
    draw_text(31,20,"Slash")
    //Magic
    draw_sprite(spr_icons,1,22,36)
    draw_text(31,36,"Magic")
    //Items
    draw_sprite(spr_icons,2,98,20)
    draw_text(107,20,"Items")
    //Skills
    draw_sprite(spr_icons,3,98,36)
    draw_text(107,36,"Skills")
    //Defend
    draw_sprite(spr_icons,4,175,20)
    draw_text(184,20,"Defend")
    //Comradery
    draw_sprite(spr_icons,5,175,36)
    draw_text(184,36,"Comradery")
    //Flee
    draw_sprite(spr_icons,6,252,20)
    draw_text(261,20,"Flee")
}
//Target Menu
else if menu = 99
{
    //Print move name
    draw_text(16,20,scr_move_name(moveKey))
    //Print move target
    switch target
    {
    case 99: draw_text(167,20,"All Foes");      break;
    case -99: draw_text(167,20,"Whole Party");  break;
    case 0: draw_text(167,20,"Everyone");       break;
    default: draw_text(167,20,target.name);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
