<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///How the player chooses what to do
//Who is controlling the menu?
controller = noone
//Where is the cursor?
cursor = 0
//Which submenu are we in?
//Use menuOptions enum
//99 for choosing target
menu = 0
//What move is being used?
moveKey = -1
//Who is being targeted?
//99 for all enemies
//-99 for party
//0 for everyone
target = noone
//What's the chosen menu?
//Use menuOptions enum
chosenMenu = -1
//Which item slot was chosen?
chosenItem = 0
//The name of the chosen item
chosenItemName = ""
//The chosen item/spell/skill's description
desc = ""
//ID for target arrow used for showing who's targeted
targetArrow = noone
//Which list is target being applied to?
targetList = noone
//How many items is the current character holding?
itemsHeld = 0
//Constant representing controller
controllerConst = 0
//Offset for menu drawing
offset = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Button press detection
//Cursor Movement
//Main menu
if menu == 0
{
    if keyboard_check_pressed(vk_right)
    {
        if cursor == 5
            cursor = 1
        else if cursor == 6
            cursor = 0
        else
            cursor += 2
    }
    if keyboard_check_pressed(vk_left)
    {
        if cursor == 0
            cursor = 6
        else if cursor == 1
            cursor = 5
        else
            cursor -= 2
    }
    if (keyboard_check_pressed(vk_down) || keyboard_check_pressed(vk_up)) &amp;&amp; cursor != 6
    {
    //Make cursor loop vertically
        if cursor mod 2 == 0
            cursor += 1
        else
            cursor -= 1
    }
    //Make cursor loop back around
    cursor = cursor mod 7
}
//Item menu
else if menu == menuOptions.ITEM
{
    
    //Horizontally move cursor
    if keyboard_check_pressed(vk_right) || keyboard_check_pressed(vk_left)
    {
        //Left to right
        if cursor mod 2 == 0 
        &amp;&amp; cursor &lt; itemsHeld - 1
        {
            cursor++
        }
        //Right to left
        else if cursor mod 2 == 1
        {
            cursor--
        }
        desc = scr_get_item_desc(global.inventory[controllerConst,cursor])
    }
    //Move cursor down
    if keyboard_check_pressed(vk_down)
    {
        cursor += 2
        //If nothing below, loop back to top
        if cursor &gt;= itemsHeld 
        {
            if cursor mod 2 == 0
                cursor = 0
            else
                cursor = 1
            offset = 0
        }
        //If going past what is currently displayed
        if cursor &gt;= offset + 8
        {
            offset += 2
        }
        desc = scr_get_item_desc(global.inventory[controllerConst,cursor])
    }
    //Move cursor up
    if keyboard_check_pressed(vk_up)
    {
        cursor -= 2
        //If nothing above, loop to bottom
        //On left
        if cursor == -2
        {
            if itemsHeld mod 2 == 0
                cursor = itemsHeld - 2
            else
                cursor = itemsHeld - 1
            //Set offset
            offset = max(0,ceil(itemsHeld/2)*2-8)
        }
        //On right
        if cursor == -1
        {
            if itemsHeld mod 2 == 0
                cursor = itemsHeld - 1
            else
                cursor = itemsHeld - 2
            //Set offset
            offset = max(0,ceil(itemsHeld/2)*2-8)
        }
        //If going past what is currently displayed
        if cursor &lt; offset
        {
            offset -= 2
        }
        desc = scr_get_item_desc(global.inventory[controllerConst,cursor])
    }
}
//Skill menu
else if menu == menuOptions.SKILL
{
    //Move cursor down
    if keyboard_check_pressed(vk_down)
    {
        cursor++
        //If nothing below, loop back to top
        if cursor &gt;= global.skillsKnown[controllerConst]
        {
            cursor = 0
            offset = 0
        }
        //If going past what is currently displayed
        if cursor &gt;= offset + 2
        {
            offset++
        }
        desc = scr_move_desc(global.skills[controllerConst,cursor])
    }
    //Move cursor up
    if keyboard_check_pressed(vk_up)
    {
        cursor--
        //If nothing above, loop to bottom
        if cursor &lt; 0
        {
            cursor = global.skillsKnown[controllerConst] - 1
            offset = max(0,cursor-1)
        }
        //If going past what is currently displayed
        if cursor &lt; offset
        {
            offset--
        }
        desc = scr_move_desc(global.skills[controllerConst,cursor])
    }
}
//Target menu
else if menu == 99
{
    //Make sure the move doesn't target an entire side (or everyone)
    if target != 99 &amp;&amp; target != -99 &amp;&amp; target != 0
    {
        if keyboard_check_pressed(vk_right)
        {
            cursor += 1
            cursor = cursor mod ds_list_size(targetList)
            target = targetList[|cursor]
            targetArrow.controller = target
        }
        if keyboard_check_pressed(vk_left)
        {
            cursor -= 1
            cursor = cursor mod ds_list_size(targetList)
            target = targetList[|cursor]
            targetArrow.controller = target
        }
    }
}

//Option Selection
if keyboard_check_pressed(cs_acceptKey)
{
    //If in main menu
    if menu == 0
    {
        //Set chosen to equal the cursor (saves what submenu we're in)
        chosenMenu = cursor
        //Basic Attack
        if cursor == menuOptions.ATTACK
        {
            //Go to target menu
            menu = 99
            moveKey = move.slash
            targetList = obj_battle_handler.enemyList
            cursor = floor(ds_list_size(targetList)/2)
            target = targetList[| cursor]
            targetArrow = instance_create(target.x,target.y-target.sprite_height-1,obj_target_arrow)
            targetArrow.controller = target
        }
        //Magic
        else if cursor == menuOptions.MAGIC
        {
        }
        //Items
        else if cursor == menuOptions.ITEM
        {
            //If you have items
            if scr_num_items_held(controllerConst)
            {
                //Go to item menu
                cursor = 0
                offset = 0
                controllerConst = controller.charConst
                itemsHeld = scr_num_items_held(controllerConst)
                desc = scr_get_item_desc(global.inventory[controllerConst,cursor])
                menu = menuOptions.ITEM
            }
            else
                chosenMenu = -1
        }
        //Skills
        else if cursor == menuOptions.SKILL
        {
            //If you know skills
            if global.skillsKnown[controllerConst] &gt; 0
            {
                //Go to skills menu
                cursor = 0
                offset = 0
                controllerConst = controller.charConst
                //Skill Description
                desc = scr_move_desc(global.skills[controllerConst,cursor])
                menu = menuOptions.SKILL
            }
            else
                chosenMenu = -1
        }
        //Defend
        else if cursor == menuOptions.DEFEND
        {
        }
        //Comradery
        else if cursor == menuOptions.COMRADE
        {
        }
        //Flee
        else if cursor == menuOptions.FLEE
        {
        }
    }
    //Choose item
    else if menu == menuOptions.ITEM
    {
        menu = 99
        chosenItem = cursor
        chosenItemName = scr_get_item_name(global.inventory[controllerConst,chosenItem])
        targetList = obj_battle_handler.partyList
        cursor = 0
        target = targetList[| cursor]
        targetArrow = instance_create(target.x,target.y-target.sprite_height-1,obj_target_arrow)
        targetArrow.controller = target
    }
    //Choose skill
    else if menu == menuOptions.SKILL
    {
    }
    //Choose target
    else if menu == 99
    {
        controller.chosenTarget = target
        instance_destroy(targetArrow)
        if chosenMenu == menuOptions.ATTACK
        {
            switch controller
            {
            case obj_knife_b: controller.moveKey = move.slash;  break;
            default: controller.moveKey = move.slash;
            } 
        }
        if chosenMenu == menuOptions.ITEM
        {
            controller.chosenItem = chosenItem
            controller.moveKey = move.useItem;
        }
        obj_battle_handler.partyChoose++
        with obj_battle_handler event_user(0)
    }
}

//Go back
else if keyboard_check_pressed(cs_declineKey)
{
    //Main Menu
    if menu == 0
    {
        cursor = 0
        chosenMenu = -1
        obj_battle_handler.partyChoose--
        with obj_battle_handler event_user(0)
    }
    //Item menu
    else if menu == menuOptions.ITEM
    || menu == menuOptions.SKILL
    {
        //Go back to main menu
        menu = 0
        cursor = chosenMenu
        chosenMenu = -1
    }
    //Target menu
    else if menu == 99
    {
        //Basic Attack
        if chosenMenu == menuOptions.ATTACK
        {
            //Go back to main menu
            menu = 0
            cursor = chosenMenu
            chosenMenu = -1
            //Destroy the target arrow
            instance_destroy(targetArrow)
        }
        //Item Menu
        if chosenMenu == menuOptions.ITEM
        {
            //Go back to item menu
            menu = menuOptions.ITEM
            cursor = chosenItem
            //Destroy the target arrow
            instance_destroy(targetArrow)
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the menu
//Set the font
draw_set_font(global.font)

//Draw the menubox
//Main menu
if menu == 0
    draw_sprite(spr_battle_menu,0,8,12)
//Magic menu
else if menu == menuOptions.MAGIC
{
    //Magic type box
    draw_sprite(spr_battle_magic_menu,0,8,12)
    //Spell list box
    draw_sprite(spr_battle_magic_menu,1,78,12)
    //SP cost box
    draw_sprite(spr_battle_magic_menu,2,256,72)
}
//Item menu
else if menu == menuOptions.ITEM
{
    draw_sprite(spr_battle_item_menu,0,8,12)
    //Item description box
    draw_sprite(spr_battle_menu,0,8,188)
}
//Skill menu
else if menu == menuOptions.SKILL
{
    draw_sprite(spr_battle_menu,0,8,12)
    //Skill description box
    draw_sprite(spr_battle_menu,0,8,188)
}
//Target menu
else if menu == 99
{
    draw_sprite(spr_battle_target,0,8,12)
    draw_sprite(spr_battle_target,0,159,12)
}

//Display who's controlling the menubox
draw_text(16,1,controller.name)
//If applicable, say what submenu this is
if chosenMenu != -1
{
    draw_rectangle(75,0,75,12,0)
    switch chosenMenu
    {
    case menuOptions.ATTACK:
        draw_sprite(spr_icons,0,78,1)
        draw_text(88,1,"Slash")
        break;
    case menuOptions.MAGIC:
        draw_sprite(spr_icons,1,78,1)
        draw_text(88,1,"Magic")
        break;
    case menuOptions.ITEM:
        draw_sprite(spr_icons,2,78,1)
        draw_text(88,1,"Items")
        break;
    case menuOptions.SKILL:
        draw_sprite(spr_icons,3,78,1)
        draw_text(88,1,"Skills")
        break;
    case menuOptions.DEFEND:
        draw_sprite(spr_icons,4,78,1)
        draw_text(88,1,"Defend")
        break;
    case menuOptions.COMRADE:
        draw_sprite(spr_icons,5,78,1)
        draw_text(88,1,"Comradery")
        break;
    }
}

//Main menu
if menu == 0
{
    //Draw the options
    //Position Cursor
    draw_sprite(spr_pointer,0,(floor(cursor/2)*76)+15,((cursor mod 2)*16)+20)
    //Basic Attack
    draw_sprite(spr_icons,0,22,20)
    draw_text(31,20,"Slash")
    //Magic
    draw_sprite(spr_icons,1,22,36)
    draw_text(31,36,"Magic")
    //Items
    draw_sprite(spr_icons,2,98,20)
    draw_text(107,20,"Items")
    //Skills
    draw_sprite(spr_icons,3,98,36)
    draw_text(107,36,"Skills")
    //Defend
    draw_sprite(spr_icons,4,174,20)
    draw_text(183,20,"Defend")
    //Comradery
    draw_sprite(spr_icons,5,174,36)
    draw_text(183,36,"Comradery")
    //Flee
    draw_sprite(spr_icons,6,250,20)
    draw_text(259,20,"Flee")
}
//Magic Menu
else if menu == menuOptions.MAGIC
{
    //Spell Types
    if controllerConst == cs_char_brawl
    {
        draw_text(20,20,"Recovery")
        draw_text(20,37,"Status")
        draw_text(20,54,"Support")
    }
    else
    {
        draw_text(20,20,"Attack")
        draw_text(20,37,"Recovery")
        draw_text(20,54,"Support")
    }
    
    //Loop through spell names and print them
    var i, j = 0
    for (i = 0; i &lt; 3; i++)
    {
        
    }
}
//Item Menu
else if menu == menuOptions.ITEM
{
    //Loop through the item names and print them
    var i
    for (i = 0; i &lt; 8; i++)
    {
        var item = global.inventory[controllerConst,i+offset]
        //Break if item = -1
        if item &lt; 0
            break
        //Even items
        if i mod 2 == 0
            draw_text(20,20+(floor(i/2)*12),scr_get_item_name(item))
        //Odd items
        else
            draw_text(168,20+(floor(i/2)*12),scr_get_item_name(item))
    }
    //Draw cursor
    if cursor mod 2 == 0
        draw_sprite(spr_pointer,0,12,20+(floor((cursor-offset)/2)*12))
    else
        draw_sprite(spr_pointer,0,160,20+(floor((cursor-offset)/2)*12))
    //Draw arrow pointing up (if necessary)
    if offset &gt; 0
        draw_sprite(spr_pointer_v,0,300,15)
    //Draw arrow pointing down (if necessary)
    if offset + 8 &lt; ceil(itemsHeld/2)*2
        draw_sprite(spr_pointer_v,1,300,63)
    //Write item description
    draw_text_ext(36,192,desc,12,272)
    //Draw item sprite
    draw_sprite(spr_item_icons,global.inventory[controllerConst,cursor],16,201)
}
//Skill Menu
else if menu == menuOptions.SKILL
{
    //Loop through the skill names and print them
    var i;
    for (i = 0; i &lt; 2; i++)
    {
        if (i + offset &gt;= global.skillsKnown[controllerConst])
            break
        else
            draw_text(23,20+(i*16),scr_move_name(global.skills[controllerConst,i+offset]))
    }
    //Loop through SP costs and print them
    draw_set_halign(fa_right)
    for (i = 0; i &lt; 2; i++)
    {
        if (i + offset &gt;= global.skillsKnown[controllerConst])
            break
        else
        {
            draw_text(294,20+(i*16),scr_sp_cost(global.skills[controllerConst,i+offset]))
        }
    }
    //Write "SP" label
    draw_text(294,1,"SP")
    draw_set_halign(fa_left)
    //Draw cursor
    draw_sprite(spr_pointer,0,15,20+((cursor-offset)*16))
    //Draw arrow pointing up (if necessary)
    if offset &gt; 0
        draw_sprite(spr_pointer_v,0,300,15)
    //Draw arrow pointing down (if necessary)
    if offset + 2 &lt; global.skillsKnown[controllerConst]
        draw_sprite(spr_pointer_v,1,300,46)
    //Write move description
    draw_text_ext(20,192,desc,12,288)
       
}
//Target Menu
else if menu == 99
{
    //Print move/item name
    if chosenMenu == menuOptions.ITEM
        draw_text(16,20,chosenItemName)
    else
        draw_text(16,20,scr_move_name(moveKey))
    //Print move target
    switch target
    {
    case cs_allFoes: draw_text(167,20,"All Foes");      break;
    case cs_allParty: draw_text(167,20,"Whole Party");  break;
    case cs_everyone: draw_text(167,20,"Everyone");       break;
    default: draw_text(167,20,target.name);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
